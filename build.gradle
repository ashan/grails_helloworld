import groovy.json.*

buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.8.2"
        classpath "org.grails.plugins:hibernate4:5.0.10"
    }
}

// GRGit for releases
plugins {
	id 'org.ajoberstar.grgit' version '1.5.1'
}
apply plugin: 'org.ajoberstar.grgit'


//version "0.1"
group "helloworld"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate4"
    compile "org.hibernate:hibernate-ehcache"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.8.2"
    runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
}

assets {
    minifyJs = true
    minifyCss = true
}

def versionFile = file("./version.json")
def versionJSON = new JsonSlurper().parseText(versionFile.text)
//def grgit = org.ajoberstar.grgit.Grgit.open(dir: project.rootDir.absolutePath)

def releseChecks(){
	grgit.remote.list().each {
		println(it.name)
	}
	// Ensure our working copy is clean first
	if (!grgit.status().isClean()) {
		throw new GradleException("You must NOT have any changes in your working copy!")
	}
}

def commitVersionFileChanges(versionFile, versionJSON){
	versionFile.write(new JsonBuilder(versionJSON).toPrettyString())
	
	// Add changes
	def changes = grgit.status().unstaged.getAllChanges()
	grgit.add(update: true, patterns: changes)

	// Commit
	grgit.commit(message: "Prepare for Alpha release")

	// Push
	grgit.push()

}

def tagRelease(versionJSON){
	// Tag
	def tagName = "${versionJSON.major}.${versionJSON.minor}.${versionJSON.revision} - ${versionJSON.buildNumber}"
	grgit.tag.add(name: tagName, message: "Release: ${tagName}")

	// Push
	grgit.push(refsOrSpecs: [tagName])
}

task releaseMajor <<{
	releseChecks()
	versionJSON.major++
	versionJSON.minor = 0
	versionJSON.revision = 0
	versionJSON.buildNumber = 0
	commitVersionFileChanges(versionFile, versionJSON)
	tagRelease(versionJSON)
}

task releaseMinor << {
	releseChecks()
	versionJSON.minor++
	versionJSON.revision = 0
	versionJSON.buildNumber = 0
	commitVersionFileChanges(versionFile, versionJSON)
	tagRelease(versionJSON)
}

task releaseRevision << {
	releseChecks()
	versionJSON.revision++
	versionJSON.buildNumber = 0
	commitVersionFileChanges(versionFile, versionJSON)
	tagRelease(versionJSON)
}

task releaseBuild <<{
	releseChecks()
	versionJSON.buildNumber++
	commitVersionFileChanges(versionFile, versionJSON)
	tagRelease(versionJSON)
}